{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","data","id","message","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","getDataFromDb","fetch","then","json","res","_this","setState","putDataToDB","currentIds","map","idToBeAdded","includes","axios","post","deleteFromDB","idTodelete","objIdToDelete","forEach","dat","_id","delete","updateDB","updateToApply","objIdToUpdate","update","this","interval","setInterval","clearInterval","_this2","react_default","a","createElement","length","style","padding","key","color","type","onChange","e","target","value","placeholder","width","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.aefe1162.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from \"axios\";\n\nclass App extends Component {\n\t// initialize our state \n\tstate = {\n\t\tdata: [],\n\t\tid: 0,\n\t\tmessage: null,\n\t\tintervalIsSet: false,\n\t\tidToDelete: null,\n\t\tidToUpdate: null,\n\t\tobjectToUpdate: null\n\t};\n\n\t// when component mounts, first thing it does is fetch all existing data in our db\n\t// then we incorporate a polling logic so that we can easily see if our db has \n\t// changed and implement those changes into our UI\n\tcomponentDidMount() {\n\t\tthis.getDataFromDb();\n\t\tif (!this.state.intervalIsSet) {\n\t\t\tlet interval = setInterval(this.getDataFromDb, 1000);\n\t\t\tthis.setState({ intervalIsSet: interval });\n\t\t}\n\t}\n\n\t// never let a process live forever \n\t// always kill a process everytime we are done using it\n\tcomponentWillUnmount() {\n\t\tif (this.state.intervalIsSet) {\n\t\t\tclearInterval(this.state.intervalIsSet);\n\t\t\tthis.setState({ intervalIsSet: null });\n\t\t}\n\t}\n\n\t// our first get method that uses our backend api to \n\t// fetch data from our data base\n\tgetDataFromDb = () => {\n\t\tfetch(\"http://localhost:3001/api/getData\")\n\t\t\t.then(data => data.json())\n\t\t\t.then(res => this.setState({ data: res.data }));\n\t};\n\n\t// our put method that uses our backend api\n\t// to create new query into our data base\n\tputDataToDB = message => {\n\t\tlet currentIds = this.state.data.map(data => data.id);\n\t\tlet idToBeAdded = 0;\n\t\twhile (currentIds.includes(idToBeAdded)) {\n\t\t\t++idToBeAdded;\n\t\t}\n\n\t\taxios.post(\"http://localhost:3001/api/putData\", {\n\t\t\tid: idToBeAdded,\n\t\t\tmessage: message\n\t\t});\n\t};\n\n\t// our delete method that uses our backend api \n\t// to remove existing database information\n\tdeleteFromDB = idTodelete => {\n\t\tlet objIdToDelete = null;\n\t\tthis.state.data.forEach(dat => {\n\t\t\tif (dat.id == idTodelete) {\n\t\t\t\tobjIdToDelete = dat._id;\n\t\t\t}\n\t\t});\n\n\t\taxios.delete(\"http://localhost:3001/api/deleteData\", {\n\t\t\tdata: {\n\t\t\t\tid: objIdToDelete\n\t\t\t}\n\t\t});\n\t};\n\n\t// our update method that uses our backend api\n\t// to overwrite existing data base information\n\tupdateDB = (idToUpdate, updateToApply) => {\n\t\tlet objIdToUpdate = null;\n\t\tthis.state.data.forEach(dat => {\n\t\t\tif (dat.id == idToUpdate) {\n\t\t\t\tobjIdToUpdate = dat._id;\n\t\t\t}\n\t\t});\n\n\t\taxios.post(\"http://localhost:3001/api/updateData\", {\n\t\t\tid: objIdToUpdate,\n\t\t\tupdate: { message: updateToApply }\n\t\t});\n\t};\n\n\n\n\trender() {\n\n\t    const { data } = this.state;\n\t    \n\t    return (\n\t\t\t<div>\n\t\t\t\t<ul>\n\t\t\t\t\t{data.length <= 0\n\t\t\t\t\t\t? \"NO DB ENTRIES YET\"\n\t\t\t\t\t\t: data.map(dat => (\n\t\t\t\t\t\t\t<li style={{ padding: \"10px\" }} key={data.message}>\n\t\t\t\t\t\t\t\t<span style={{ color: \"gray\" }}> id: </span> {dat.id} <br />\n\t\t\t\t\t\t\t\t<span style={{ color: \"gray\" }}> data: </span>\n\t\t\t\t\t\t\t\t{dat.message}\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t\t<div style={{ padding: \"10px\" }}>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tonChange={e => this.setState({ message: e.target.value })}\n\t\t\t\t\t\tplaceholder=\"add something in the database\"\n\t\t\t\t\t\tstyle={{ width: \"200px\" }}\n\t\t\t\t\t/>\n\t\t\t\t\t<button onClick={() => this.putDataToDB(this.state.message)}>\n\t\t\t\t\t\tADD\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div style={{ padding: \"10px\" }}>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tstyle={{ width: \"200px\" }}\n\t\t\t\t\t\tonChange={e => this.setState({ idToDelete: e.target.value })}\n\t\t\t\t\t\tplaceholder=\"put id of item to delete here\"\n\t\t\t\t\t/>\n\t\t\t\t\t<button onClick={() => this.deleteFromDB(this.state.idToDelete)}>\n\t\t\t\t\t\tDELETE\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<div style={{ padding: \"10px\" }}>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tstyle={{ width: \"200px\" }}\n\t\t\t\t\t\tonChange={e => this.setState({ idToUpdate: e.target.value })}\n\t\t\t\t\t\tplaceholder=\"id of item to update here\"\n\t\t\t\t\t/>\n\t\t\t\t\t<input\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tstyle={{ width: \"200px\" }}\n\t\t\t\t\t\tonChange={e => this.setState({ updateToApply: e.target.value })}\n\t\t\t\t\t\tplaceholder=\"put new value of the item here\"\n\t\t\t\t\t/>\n\t\t\t\t\t<button\n\t\t\t\t\t\tonClick={() =>\n\t\t\t\t\t\t\tthis.updateDB(this.state.idToUpdate, this.state.updateToApply)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tUPDATE\n\t\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}